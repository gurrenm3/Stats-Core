using Stats_Core.Stats.player;

namespace Stats_Core.Extensions
{
    /// <summary>
    /// Extension methods for <see cref="LiveMixin"/>.
    /// </summary>
    public static class LiveMixinExt
    {
        /// <summary>
        /// Raises the max health of this LiveMixin.
        /// </summary>
        /// <param name="liveMixin"></param>
        /// <param name="amount">Amount to raise max health by.</param>
        public static void RaiseMaxHealth(this LiveMixin liveMixin, float amount) => liveMixin.data.maxHealth += amount;

        /// <summary>
        /// Reduces the max health of this LiveMixin.
        /// </summary>
        /// <param name="liveMixin"></param>
        /// <param name="amount">Amount to reduce max health by.</param>
        public static void ReduceMaxHealth(this LiveMixin liveMixin, float amount) => liveMixin.data.maxHealth -= amount;


        /// <summary>
        /// Returns the time delay between each health regen period. For example, health will regenerate a little bit every 1 second.
        /// In this example, 1 second is the health regen delay.
        /// </summary>
        /// <param name="liveMixin"></param>
        /// <returns></returns>
        public static float GetHealthRegenDelay(this LiveMixin liveMixin) => Health.HealthRegenDelay;

        /// <summary>
        /// Raises the time delay between each health regen period.
        /// </summary>
        /// <param name="liveMixin"></param>
        /// <param name="amount">Amount to raise the health regen delay by.</param>
        public static void RaiseHealthRegenDelay(this LiveMixin liveMixin, float amount) => Health.HealthRegenDelay += amount;

        /// <summary>
        /// Reduces the time delay between each health regen period.
        /// </summary>
        /// <param name="liveMixin"></param>
        /// <param name="amount">Amount to reduce health regen delay by.</param>
        public static void ReduceHealthRegenDelay(this LiveMixin liveMixin, float amount) => Health.HealthRegenDelay -= amount;
        

        /// <summary>
        /// Returns the amount that health is regenerated by per each health regen period.
        /// </summary>
        /// <param name="liveMixin"></param>
        /// <returns></returns>
        public static float GetHealthRegenAmount(this LiveMixin liveMixin) => Health.HealthRegenAmount;

        /// <summary>
        /// Raises the amount of health that is recovered per each health regen period.
        /// </summary>
        /// <param name="liveMixin"></param>
        /// <param name="amount">Amount to raise the health regen by.</param>
        public static void RaiseHealthRegenAmount(this LiveMixin liveMixin, float amount) => Health.HealthRegenAmount += amount;

        /// <summary>
        /// Reduces the amount of health that is recovered per each health regen period.
        /// </summary>
        /// <param name="liveMixin"></param>
        /// <param name="amount">Amount to reduce the health regeneration by.</param>
        public static void ReduceHealthRegenAmount(this LiveMixin liveMixin, float amount) => Health.HealthRegenAmount -= amount;


        /// <summary>
        /// Returns how long it takes for the health to start regenerating after taking damage.
        /// </summary>
        /// <param name="liveMixin"></param>
        /// <returns></returns>
        public static float GetHealthRegenDelay_AfterDamage(this LiveMixin liveMixin) => Health.HealthRegen_Delay_AfterDamage;
        
        /// <summary>
        /// Raises the amount of time it takes for health to start regenerating after taking damage.
        /// </summary>
        /// <param name="liveMixin"></param>
        /// <param name="amount">Amount to raise regen delay by.</param>
        public static void RaiseHealthRegenDelay_AfterDamage(this LiveMixin liveMixin, float amount) => Health.HealthRegen_Delay_AfterDamage += amount;

        /// <summary>
        /// Reduces the amount of time it takes for health to start regenerating after taking damage.
        /// </summary>
        /// <param name="liveMixin"></param>
        /// <param name="amount">Amount to reduce regen delay by.</param>
        public static void ReduceHealthRegenDelay_AfterDamage(this LiveMixin liveMixin, float amount) => Health.HealthRegen_Delay_AfterDamage -= amount;


        /// <summary>
        /// Get's the temp damage heal rate.
        /// </summary>
        /// <param name="liveMixin"></param>
        /// <returns></returns>
        public static float GetTempDamageHealRate(this LiveMixin liveMixin) => LiveMixin.tempDamageHealRate;

        /// <summary>
        /// Raises the temp damage heal rate.
        /// </summary>
        /// <param name="liveMixin"></param>
        /// <param name="amount">Amount to raise by.</param>
        public static void RaiseTempDamageHealRate(this LiveMixin liveMixin, float amount) => LiveMixin.tempDamageHealRate += amount;

        /// <summary>
        /// Reduces the temp damage heal rate.
        /// </summary>
        /// <param name="liveMixin"></param>
        /// <param name="amount">Amount to reduce by.</param>
        public static void ReduceTempDamageHealRate(this LiveMixin liveMixin, float amount) => LiveMixin.tempDamageHealRate -= amount;
    }
}
